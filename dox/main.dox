/**
\mainpage JonTest

\section main_intro Introduction

JonTest was a rapid demonstration of certain techniques for the benefit of one person. Given that it functioned, I am presenting it as a modern example of my work -- even if rushed.

\warning This is not intended for production work.
- Genreal coding standards conventions are violated out of necessity and convenience to the user of this tool
- Extensive real-world testing has not been performed
- The author did not create this to be used and maintained.
  - Better alternatives exist, such as boost test and google test exist.
  - Use them.

This is a unit test tool providing the following:
- Minimial boilerplate for individual test suites and cases
 - single definition within a .cpp file
 - automatic test suite and case registration
- General assertions based around:
  - boolean values
  - pointer nullptr / valid (non-nullptr)
  - numeric-style comparison: == != < <= > >=
  - specific exception class (including base class) thrown
  - assertions that are known to fail

This is constrained by the following:
- The build system only has GNU Make definitions to build under a GNU environment using g++.
- The build system is only configured for --std=c++23

\section main_overview Overview

The TestRunne::get() singleton is used to run tests. Typically, this is from a main() function; however, it could be integrated into a larger testing system.
\see \ref main.cpp

Testing is organized a tree containing:
- Test Suites created with TEST_SUITE(suiteName), containing:
  - (Optional) Reusable Test Case data, unique for each Test Suite that is:
    - Located in the class generated by/between `TEST_SUITE(suitName) ... TEST_SUITE_END()`
    - (Optional) Initialized before each test case by the automatically run `setup() { ... }`
    - Used in each Test Case method generated by `TEST_CASE(caseName) { ... }`
    - (Optional) Cleaned up after each test case by the automatically run `teardown()`
  - (Optional) Test Case `setup()`, unique for each Test Suite, run before each Test Case in the Test Suite, which may contain:
    - Assertions of validatity, such as assert()
  - Test Cases created with TEST_CASE(caseName), verified by/containing:
    - Assertions of validatity, such as assert()
  - (Optional) Test Case `teardown()`, unique for each Test Suite, run before after Test Case in the Test Suite, which may contain:
    - Assertions of validatity, such as assert()

Source Code Examples:
- \ref main.cpp         -- Running the tests
- \ref SimpleTest.cpp   -- Demo that all cases are run in a test
- \ref SimpleTest2.cpp  -- Testing the tests


\section main_license
This project is released under the [BSD 3-Clause License](http://opensource.org/licenses/BSD-3-Clause).

> Copyright (c) 2025, Jonathan Seng
> 
> All rights reserved.
> 
> Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
> 
> - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
> 
> - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
> 
> - Neither the name of Jonathan Seng nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
> 
> THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
> 


\section main_install Installation

1. Clone this repostiroy
2. Update Make/Makefile.compile.incl as necessary
3. `make`
4. (Optional) include Makefile.lib.incl
5. Include headers in include/JonTest such as `#include "JonTest/Assert.h"`
6. Link in the statically compiled lib/libJonTest.a


*/