#
# Makefile.compile.incl
#

#
# Support for common definitions and rules
#
ifdef MAKE_LIB
	MAKE_COMPILE= true
endif
ifdef MAKE_EXE
	MAKE_COMPILE= true
endif
ifdef MAKE_EXES
	MAKE_COMPILE= true
endif

#
# Common definitions and rules (before specialized)
#
ifdef MAKE_COMPILE
BUILD_DIR=$(TOPDIR)/build/$(shell realpath --relative-to $(TOPDIR) .)

# Common variables
SRC:= $(shell find . -type f -name '*.cpp' -printf '%P ')
OBJECTS= $(patsubst %.cpp,$(BUILD_DIR)/%.o,${SRC})
DEPENDS= $(patsubst %.o,%.d,${OBJECTS})
TARGETS=
INFO="(unknown)"

-include ${DEPENDS}

# Generic verification of required libraries in $(LIB_DEP)
# Add this as a target to other rules, as needed.
# Note: All targets in $(TARGETS) will automatically get this dependency
.PHONY: very-lib-dep
verify-lib-dep:
	$(foreach lib, $(LIB_DEP), @if [ ! -e $(lib) ] ; then echo "Missing required library in LIB_DEP: $(lib)" ; exit 1 ; fi)

# Generic object file build
# Note: This always builds the .d. If the .d doesn't exist, the .o wouldn't, so both are generated.
$(BUILD_DIR)/%.o: %.cpp
	-@mkdir -p $(dir $@)
	$(CXX) $(CXXFLAGS) -MMD -o $@ -c $<

endif

#
# MAKE_LIB makes the library $(MAKE_LIB) from all source files
#
ifdef MAKE_LIB
INFO= Info for library: ${MAKE_LIB}
LIBRARY= ${MAKE_LIB}
TARGETS=${LIBRARY}

# Make the library

$(LIBRARY): $(OBJECTS)
	$(AR) $(ARFLAGS) $@ $^
	ranlib $@

endif

#
# MAKE_EXE makes the executable $(MAKE_EXE) from all source files
#
ifdef MAKE_EXE
INFO= Info for executable: ${MAKE_EXE}
EXECUTABLE= $(BUILD_DIR)/${MAKE_EXE}
TARGETS= $(EXECUTABLE)

# Make the executable
$(EXECUTABLE): $(OBJECTS) $(LIB_DEP)
	-@mkdir -p $(dir $@)
	$(CXX) $(CXXFLAGS) -o $@ $^ $(LIBS)

endif

#
# MAKE_EXES makes one executable for each source file
#
ifdef MAKE_EXES
INFO= Info for executables: $(TARGETS) 
TARGETS= $(patsubst %.cpp,$(BUILD_DIR)/%.exe,${SRC})

# MAKE_EXES is designed for a unique int main() per file in the directory.
# Since int main() cannot be attached to a Module, we do not support modules here.
#
# In theory, int main() might be in a $(LIB_DEP), which is awkwared thus unsupported here.

# Make each executable
$(BUILD_DIR)/%.exe: %.cpp $(LIB_DEP)
	-@mkdir -p $(dir $@)
	$(CXX) $(CXXFLAGS) -MMD -o $@ $< ${LIBS}

endif

#
# Common rules (after specialized)
# - all, clean, cleaner, cleanest, info
#
ifdef MAKE_COMPILE
# all builds depend upon the TARGETS
all: ${TARGETS}

# all TARGETS depend on verify-lib-dep
$(TARGETS): | verify-lib-dep

# Clean target (if OBJECTS is not empty)
ifneq "$(OBJECTS)" ""
.PHONY: clean-compile
clean-compile:
	-rm -f $(OBJECTS)
clean: clean-compile
endif

# Cleaner target
.PHONY: cleaner-compile
cleaner-compile:
	-rm -f $(DEPENDS)
cleaner: cleaner-compile

# Cleanest target
.PHONY: cleanest-compile
cleanest-compile:
	-rm -f $(TARGETS)
cleanest: cleanest-compile

# Info target
.PHONY: info-compile
info-compile:
	@echo $(INFO)
	@echo " "
	@echo BUILD_DIR=$(BUILD_DIR)
	@echo CXX=${CXX}
	@echo CXXFLAGS=${CXXFLAGS}
	@echo LIBS=${LIBS}
	@echo " "
	@echo MODS   =$(MODS)
	@echo SRC    =$(SRC)
	@echo DEPENDS=${DEPENDS}
	@echo OBJECTS=${OBJECTS}
	@echo TARGETS=${TARGETS}
	@echo LIB_DEP=${LIB_DEP}
	@echo " "
	@echo For all known dependencies, use: make depend-info
	
info: info-compile verify-lib-dep

# Dependency info target
.PHONY: depend-info
depend-info:
	@echo All known Dependencies:
	@find $(TOPDIR)/build/ -name *.d -exec echo ---- \{\} ---- \; -exec cat \{\} \;

endif